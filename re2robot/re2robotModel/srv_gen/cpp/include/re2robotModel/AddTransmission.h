/* Auto-generated by genmsg_cpp for file /home/dave/ros/re2robot/re2robotModel/srv/AddTransmission.srv */
#ifndef RE2ROBOTMODEL_SERVICE_ADDTRANSMISSION_H
#define RE2ROBOTMODEL_SERVICE_ADDTRANSMISSION_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"

#include "re2robotModel/TransmissionConfig.h"



namespace re2robotModel
{
template <class ContainerAllocator>
struct AddTransmissionRequest_ : public ros::Message
{
  typedef AddTransmissionRequest_<ContainerAllocator> Type;

  AddTransmissionRequest_()
  : config()
  {
  }

  AddTransmissionRequest_(const ContainerAllocator& _alloc)
  : config(_alloc)
  {
  }

  typedef  ::re2robotModel::TransmissionConfig_<ContainerAllocator>  _config_type;
   ::re2robotModel::TransmissionConfig_<ContainerAllocator>  config;


private:
  static const char* __s_getDataType_() { return "re2robotModel/AddTransmissionRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "08772b9abaa0a792c92a394f7d3e8067"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d23cfae343317ef728ad2d22a93edf01"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "TransmissionConfig config\n\
\n\
================================================================================\n\
MSG: re2robotModel/TransmissionConfig\n\
string type\n\
string drive\n\
string joint\n\
float32 timerIntervalS\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, config);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, config);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(config);
    return size;
  }

  typedef boost::shared_ptr< ::re2robotModel::AddTransmissionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re2robotModel::AddTransmissionRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct AddTransmissionRequest
typedef  ::re2robotModel::AddTransmissionRequest_<std::allocator<void> > AddTransmissionRequest;

typedef boost::shared_ptr< ::re2robotModel::AddTransmissionRequest> AddTransmissionRequestPtr;
typedef boost::shared_ptr< ::re2robotModel::AddTransmissionRequest const> AddTransmissionRequestConstPtr;


template <class ContainerAllocator>
struct AddTransmissionResponse_ : public ros::Message
{
  typedef AddTransmissionResponse_<ContainerAllocator> Type;

  AddTransmissionResponse_()
  : success(false)
  {
  }

  AddTransmissionResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


private:
  static const char* __s_getDataType_() { return "re2robotModel/AddTransmissionResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "358e233cde0c8a8bcfea4ce193f8fc15"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d23cfae343317ef728ad2d22a93edf01"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool success\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::re2robotModel::AddTransmissionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re2robotModel::AddTransmissionResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct AddTransmissionResponse
typedef  ::re2robotModel::AddTransmissionResponse_<std::allocator<void> > AddTransmissionResponse;

typedef boost::shared_ptr< ::re2robotModel::AddTransmissionResponse> AddTransmissionResponsePtr;
typedef boost::shared_ptr< ::re2robotModel::AddTransmissionResponse const> AddTransmissionResponseConstPtr;

struct AddTransmission
{

typedef AddTransmissionRequest Request;
typedef AddTransmissionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AddTransmission
} // namespace re2robotModel

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::re2robotModel::AddTransmissionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "08772b9abaa0a792c92a394f7d3e8067";
  }

  static const char* value(const  ::re2robotModel::AddTransmissionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x08772b9abaa0a792ULL;
  static const uint64_t static_value2 = 0xc92a394f7d3e8067ULL;
};

template<class ContainerAllocator>
struct DataType< ::re2robotModel::AddTransmissionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotModel/AddTransmissionRequest";
  }

  static const char* value(const  ::re2robotModel::AddTransmissionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re2robotModel::AddTransmissionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "TransmissionConfig config\n\
\n\
================================================================================\n\
MSG: re2robotModel/TransmissionConfig\n\
string type\n\
string drive\n\
string joint\n\
float32 timerIntervalS\n\
";
  }

  static const char* value(const  ::re2robotModel::AddTransmissionRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::re2robotModel::AddTransmissionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::re2robotModel::AddTransmissionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::re2robotModel::AddTransmissionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotModel/AddTransmissionResponse";
  }

  static const char* value(const  ::re2robotModel::AddTransmissionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re2robotModel::AddTransmissionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
";
  }

  static const char* value(const  ::re2robotModel::AddTransmissionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::re2robotModel::AddTransmissionResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re2robotModel::AddTransmissionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.config);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddTransmissionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re2robotModel::AddTransmissionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddTransmissionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re2robotModel::AddTransmission> {
  static const char* value() 
  {
    return "d23cfae343317ef728ad2d22a93edf01";
  }

  static const char* value(const re2robotModel::AddTransmission&) { return value(); } 
};

template<>
struct DataType<re2robotModel::AddTransmission> {
  static const char* value() 
  {
    return "re2robotModel/AddTransmission";
  }

  static const char* value(const re2robotModel::AddTransmission&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re2robotModel::AddTransmissionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d23cfae343317ef728ad2d22a93edf01";
  }

  static const char* value(const re2robotModel::AddTransmissionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re2robotModel::AddTransmissionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotModel/AddTransmission";
  }

  static const char* value(const re2robotModel::AddTransmissionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re2robotModel::AddTransmissionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d23cfae343317ef728ad2d22a93edf01";
  }

  static const char* value(const re2robotModel::AddTransmissionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re2robotModel::AddTransmissionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotModel/AddTransmission";
  }

  static const char* value(const re2robotModel::AddTransmissionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE2ROBOTMODEL_SERVICE_ADDTRANSMISSION_H

