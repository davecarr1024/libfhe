"""autogenerated by genmsg_py from TransmissionCmd.msg. Do not edit."""
import roslib.message
import struct


class TransmissionCmd(roslib.message.Message):
  _md5sum = "3af6dabffd29e01e37500e9a7f5f0bdd"
  _type = "re2robotModel/TransmissionCmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 MODE_EFFORT = 1
uint8 MODE_VELOCITY = 2
uint8 MODE_POSITION = 3

uint8 mode
float32 cmd
"""
  # Pseudo-constants
  MODE_EFFORT = 1
  MODE_VELOCITY = 2
  MODE_POSITION = 3

  __slots__ = ['mode','cmd']
  _slot_types = ['uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       mode,cmd
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(TransmissionCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.cmd is None:
        self.cmd = 0.
    else:
      self.mode = 0
      self.cmd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_Bf.pack(_x.mode, _x.cmd))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.mode, _x.cmd,) = _struct_Bf.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_Bf.pack(_x.mode, _x.cmd))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.mode, _x.cmd,) = _struct_Bf.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_Bf = struct.Struct("<Bf")
