/* Auto-generated by genmsg_cpp for file /home/dave/ros/re2robot/re2robotModel/msg/ModelConfig.msg */
#ifndef RE2ROBOTMODEL_MESSAGE_MODELCONFIG_H
#define RE2ROBOTMODEL_MESSAGE_MODELCONFIG_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "re2robotModel/TransmissionConfig.h"
#include "re2robotModel/ArbiterConfig.h"

namespace re2robotModel
{
template <class ContainerAllocator>
struct ModelConfig_ : public ros::Message
{
  typedef ModelConfig_<ContainerAllocator> Type;

  ModelConfig_()
  : transmissions()
  , arbiters()
  {
  }

  ModelConfig_(const ContainerAllocator& _alloc)
  : transmissions(_alloc)
  , arbiters(_alloc)
  {
  }

  typedef std::vector< ::re2robotModel::TransmissionConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotModel::TransmissionConfig_<ContainerAllocator> >::other >  _transmissions_type;
  std::vector< ::re2robotModel::TransmissionConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotModel::TransmissionConfig_<ContainerAllocator> >::other >  transmissions;

  typedef std::vector< ::re2robotModel::ArbiterConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotModel::ArbiterConfig_<ContainerAllocator> >::other >  _arbiters_type;
  std::vector< ::re2robotModel::ArbiterConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotModel::ArbiterConfig_<ContainerAllocator> >::other >  arbiters;


  ROS_DEPRECATED uint32_t get_transmissions_size() const { return (uint32_t)transmissions.size(); }
  ROS_DEPRECATED void set_transmissions_size(uint32_t size) { transmissions.resize((size_t)size); }
  ROS_DEPRECATED void get_transmissions_vec(std::vector< ::re2robotModel::TransmissionConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotModel::TransmissionConfig_<ContainerAllocator> >::other > & vec) const { vec = this->transmissions; }
  ROS_DEPRECATED void set_transmissions_vec(const std::vector< ::re2robotModel::TransmissionConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotModel::TransmissionConfig_<ContainerAllocator> >::other > & vec) { this->transmissions = vec; }
  ROS_DEPRECATED uint32_t get_arbiters_size() const { return (uint32_t)arbiters.size(); }
  ROS_DEPRECATED void set_arbiters_size(uint32_t size) { arbiters.resize((size_t)size); }
  ROS_DEPRECATED void get_arbiters_vec(std::vector< ::re2robotModel::ArbiterConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotModel::ArbiterConfig_<ContainerAllocator> >::other > & vec) const { vec = this->arbiters; }
  ROS_DEPRECATED void set_arbiters_vec(const std::vector< ::re2robotModel::ArbiterConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotModel::ArbiterConfig_<ContainerAllocator> >::other > & vec) { this->arbiters = vec; }
private:
  static const char* __s_getDataType_() { return "re2robotModel/ModelConfig"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "417ae4eb253d437dfccedc437013e3aa"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "TransmissionConfig[] transmissions\n\
ArbiterConfig[] arbiters\n\
================================================================================\n\
MSG: re2robotModel/TransmissionConfig\n\
string type\n\
string drive\n\
string joint\n\
float32 timerIntervalS\n\
================================================================================\n\
MSG: re2robotModel/ArbiterConfig\n\
#common\n\
string type\n\
float32 updateIntervalS\n\
\n\
#control arbiter\n\
string initialController\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, transmissions);
    ros::serialization::serialize(stream, arbiters);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, transmissions);
    ros::serialization::deserialize(stream, arbiters);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(transmissions);
    size += ros::serialization::serializationLength(arbiters);
    return size;
  }

  typedef boost::shared_ptr< ::re2robotModel::ModelConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re2robotModel::ModelConfig_<ContainerAllocator>  const> ConstPtr;
}; // struct ModelConfig
typedef  ::re2robotModel::ModelConfig_<std::allocator<void> > ModelConfig;

typedef boost::shared_ptr< ::re2robotModel::ModelConfig> ModelConfigPtr;
typedef boost::shared_ptr< ::re2robotModel::ModelConfig const> ModelConfigConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::re2robotModel::ModelConfig_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::re2robotModel::ModelConfig_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace re2robotModel

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::re2robotModel::ModelConfig_<ContainerAllocator> > {
  static const char* value() 
  {
    return "417ae4eb253d437dfccedc437013e3aa";
  }

  static const char* value(const  ::re2robotModel::ModelConfig_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x417ae4eb253d437dULL;
  static const uint64_t static_value2 = 0xfccedc437013e3aaULL;
};

template<class ContainerAllocator>
struct DataType< ::re2robotModel::ModelConfig_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotModel/ModelConfig";
  }

  static const char* value(const  ::re2robotModel::ModelConfig_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re2robotModel::ModelConfig_<ContainerAllocator> > {
  static const char* value() 
  {
    return "TransmissionConfig[] transmissions\n\
ArbiterConfig[] arbiters\n\
================================================================================\n\
MSG: re2robotModel/TransmissionConfig\n\
string type\n\
string drive\n\
string joint\n\
float32 timerIntervalS\n\
================================================================================\n\
MSG: re2robotModel/ArbiterConfig\n\
#common\n\
string type\n\
float32 updateIntervalS\n\
\n\
#control arbiter\n\
string initialController\n\
";
  }

  static const char* value(const  ::re2robotModel::ModelConfig_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re2robotModel::ModelConfig_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.transmissions);
    stream.next(m.arbiters);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ModelConfig_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::re2robotModel::ModelConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::re2robotModel::ModelConfig_<ContainerAllocator> & v) 
  {
    s << indent << "transmissions[]" << std::endl;
    for (size_t i = 0; i < v.transmissions.size(); ++i)
    {
      s << indent << "  transmissions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::re2robotModel::TransmissionConfig_<ContainerAllocator> >::stream(s, indent + "    ", v.transmissions[i]);
    }
    s << indent << "arbiters[]" << std::endl;
    for (size_t i = 0; i < v.arbiters.size(); ++i)
    {
      s << indent << "  arbiters[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::re2robotModel::ArbiterConfig_<ContainerAllocator> >::stream(s, indent + "    ", v.arbiters[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RE2ROBOTMODEL_MESSAGE_MODELCONFIG_H

