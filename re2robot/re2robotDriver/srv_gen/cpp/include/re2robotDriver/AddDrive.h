/* Auto-generated by genmsg_cpp for file /home/dave/ros/re2robot/re2robotDriver/srv/AddDrive.srv */
#ifndef RE2ROBOTDRIVER_SERVICE_ADDDRIVE_H
#define RE2ROBOTDRIVER_SERVICE_ADDDRIVE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"

#include "re2robotDriver/DriveConfig.h"



namespace re2robotDriver
{
template <class ContainerAllocator>
struct AddDriveRequest_ : public ros::Message
{
  typedef AddDriveRequest_<ContainerAllocator> Type;

  AddDriveRequest_()
  : config()
  {
  }

  AddDriveRequest_(const ContainerAllocator& _alloc)
  : config(_alloc)
  {
  }

  typedef  ::re2robotDriver::DriveConfig_<ContainerAllocator>  _config_type;
   ::re2robotDriver::DriveConfig_<ContainerAllocator>  config;


private:
  static const char* __s_getDataType_() { return "re2robotDriver/AddDriveRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "261d54567be7e7d9c2c8b1a6996d205c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "70c564ffc604af2a9251b0bf0a28375f"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "DriveConfig config\n\
\n\
================================================================================\n\
MSG: re2robotDriver/DriveConfig\n\
#Drive\n\
string name\n\
string type\n\
float32 updateIntervalS\n\
float32 cmdTimeoutS\n\
float32 maxVelocity\n\
float32 minPosition\n\
float32 maxPosition\n\
\n\
#SimDrive\n\
float32 initialPosition\n\
float32 positionPGain\n\
float32 positionDGain\n\
float32 velocityTimeToTargetS\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, config);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, config);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(config);
    return size;
  }

  typedef boost::shared_ptr< ::re2robotDriver::AddDriveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re2robotDriver::AddDriveRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct AddDriveRequest
typedef  ::re2robotDriver::AddDriveRequest_<std::allocator<void> > AddDriveRequest;

typedef boost::shared_ptr< ::re2robotDriver::AddDriveRequest> AddDriveRequestPtr;
typedef boost::shared_ptr< ::re2robotDriver::AddDriveRequest const> AddDriveRequestConstPtr;


template <class ContainerAllocator>
struct AddDriveResponse_ : public ros::Message
{
  typedef AddDriveResponse_<ContainerAllocator> Type;

  AddDriveResponse_()
  : success(false)
  {
  }

  AddDriveResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


private:
  static const char* __s_getDataType_() { return "re2robotDriver/AddDriveResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "358e233cde0c8a8bcfea4ce193f8fc15"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "70c564ffc604af2a9251b0bf0a28375f"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool success\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::re2robotDriver::AddDriveResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re2robotDriver::AddDriveResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct AddDriveResponse
typedef  ::re2robotDriver::AddDriveResponse_<std::allocator<void> > AddDriveResponse;

typedef boost::shared_ptr< ::re2robotDriver::AddDriveResponse> AddDriveResponsePtr;
typedef boost::shared_ptr< ::re2robotDriver::AddDriveResponse const> AddDriveResponseConstPtr;

struct AddDrive
{

typedef AddDriveRequest Request;
typedef AddDriveResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AddDrive
} // namespace re2robotDriver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::re2robotDriver::AddDriveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "261d54567be7e7d9c2c8b1a6996d205c";
  }

  static const char* value(const  ::re2robotDriver::AddDriveRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x261d54567be7e7d9ULL;
  static const uint64_t static_value2 = 0xc2c8b1a6996d205cULL;
};

template<class ContainerAllocator>
struct DataType< ::re2robotDriver::AddDriveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotDriver/AddDriveRequest";
  }

  static const char* value(const  ::re2robotDriver::AddDriveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re2robotDriver::AddDriveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "DriveConfig config\n\
\n\
================================================================================\n\
MSG: re2robotDriver/DriveConfig\n\
#Drive\n\
string name\n\
string type\n\
float32 updateIntervalS\n\
float32 cmdTimeoutS\n\
float32 maxVelocity\n\
float32 minPosition\n\
float32 maxPosition\n\
\n\
#SimDrive\n\
float32 initialPosition\n\
float32 positionPGain\n\
float32 positionDGain\n\
float32 velocityTimeToTargetS\n\
";
  }

  static const char* value(const  ::re2robotDriver::AddDriveRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::re2robotDriver::AddDriveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::re2robotDriver::AddDriveResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::re2robotDriver::AddDriveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotDriver/AddDriveResponse";
  }

  static const char* value(const  ::re2robotDriver::AddDriveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re2robotDriver::AddDriveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
";
  }

  static const char* value(const  ::re2robotDriver::AddDriveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::re2robotDriver::AddDriveResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re2robotDriver::AddDriveRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.config);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddDriveRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re2robotDriver::AddDriveResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddDriveResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re2robotDriver::AddDrive> {
  static const char* value() 
  {
    return "70c564ffc604af2a9251b0bf0a28375f";
  }

  static const char* value(const re2robotDriver::AddDrive&) { return value(); } 
};

template<>
struct DataType<re2robotDriver::AddDrive> {
  static const char* value() 
  {
    return "re2robotDriver/AddDrive";
  }

  static const char* value(const re2robotDriver::AddDrive&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re2robotDriver::AddDriveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "70c564ffc604af2a9251b0bf0a28375f";
  }

  static const char* value(const re2robotDriver::AddDriveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re2robotDriver::AddDriveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotDriver/AddDrive";
  }

  static const char* value(const re2robotDriver::AddDriveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re2robotDriver::AddDriveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "70c564ffc604af2a9251b0bf0a28375f";
  }

  static const char* value(const re2robotDriver::AddDriveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re2robotDriver::AddDriveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotDriver/AddDrive";
  }

  static const char* value(const re2robotDriver::AddDriveResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE2ROBOTDRIVER_SERVICE_ADDDRIVE_H

