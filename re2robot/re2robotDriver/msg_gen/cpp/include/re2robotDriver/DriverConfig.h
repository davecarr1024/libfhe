/* Auto-generated by genmsg_cpp for file /home/dave/ros/re2robot/re2robotDriver/msg/DriverConfig.msg */
#ifndef RE2ROBOTDRIVER_MESSAGE_DRIVERCONFIG_H
#define RE2ROBOTDRIVER_MESSAGE_DRIVERCONFIG_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "re2robotDriver/DriveConfig.h"

namespace re2robotDriver
{
template <class ContainerAllocator>
struct DriverConfig_ : public ros::Message
{
  typedef DriverConfig_<ContainerAllocator> Type;

  DriverConfig_()
  : drives()
  {
  }

  DriverConfig_(const ContainerAllocator& _alloc)
  : drives(_alloc)
  {
  }

  typedef std::vector< ::re2robotDriver::DriveConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotDriver::DriveConfig_<ContainerAllocator> >::other >  _drives_type;
  std::vector< ::re2robotDriver::DriveConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotDriver::DriveConfig_<ContainerAllocator> >::other >  drives;


  ROS_DEPRECATED uint32_t get_drives_size() const { return (uint32_t)drives.size(); }
  ROS_DEPRECATED void set_drives_size(uint32_t size) { drives.resize((size_t)size); }
  ROS_DEPRECATED void get_drives_vec(std::vector< ::re2robotDriver::DriveConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotDriver::DriveConfig_<ContainerAllocator> >::other > & vec) const { vec = this->drives; }
  ROS_DEPRECATED void set_drives_vec(const std::vector< ::re2robotDriver::DriveConfig_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::re2robotDriver::DriveConfig_<ContainerAllocator> >::other > & vec) { this->drives = vec; }
private:
  static const char* __s_getDataType_() { return "re2robotDriver/DriverConfig"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "eeb8e90567be2610059b20481b8a260e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "DriveConfig[] drives\n\
================================================================================\n\
MSG: re2robotDriver/DriveConfig\n\
#Drive\n\
string name\n\
string type\n\
float32 updateIntervalS\n\
float32 cmdTimeoutS\n\
float32 maxVelocity\n\
float32 minPosition\n\
float32 maxPosition\n\
\n\
#SimDrive\n\
float32 initialPosition\n\
float32 positionPGain\n\
float32 positionDGain\n\
float32 velocityTimeToTargetS\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, drives);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, drives);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(drives);
    return size;
  }

  typedef boost::shared_ptr< ::re2robotDriver::DriverConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re2robotDriver::DriverConfig_<ContainerAllocator>  const> ConstPtr;
}; // struct DriverConfig
typedef  ::re2robotDriver::DriverConfig_<std::allocator<void> > DriverConfig;

typedef boost::shared_ptr< ::re2robotDriver::DriverConfig> DriverConfigPtr;
typedef boost::shared_ptr< ::re2robotDriver::DriverConfig const> DriverConfigConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::re2robotDriver::DriverConfig_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::re2robotDriver::DriverConfig_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace re2robotDriver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::re2robotDriver::DriverConfig_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eeb8e90567be2610059b20481b8a260e";
  }

  static const char* value(const  ::re2robotDriver::DriverConfig_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeeb8e90567be2610ULL;
  static const uint64_t static_value2 = 0x059b20481b8a260eULL;
};

template<class ContainerAllocator>
struct DataType< ::re2robotDriver::DriverConfig_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotDriver/DriverConfig";
  }

  static const char* value(const  ::re2robotDriver::DriverConfig_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re2robotDriver::DriverConfig_<ContainerAllocator> > {
  static const char* value() 
  {
    return "DriveConfig[] drives\n\
================================================================================\n\
MSG: re2robotDriver/DriveConfig\n\
#Drive\n\
string name\n\
string type\n\
float32 updateIntervalS\n\
float32 cmdTimeoutS\n\
float32 maxVelocity\n\
float32 minPosition\n\
float32 maxPosition\n\
\n\
#SimDrive\n\
float32 initialPosition\n\
float32 positionPGain\n\
float32 positionDGain\n\
float32 velocityTimeToTargetS\n\
";
  }

  static const char* value(const  ::re2robotDriver::DriverConfig_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re2robotDriver::DriverConfig_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.drives);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DriverConfig_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::re2robotDriver::DriverConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::re2robotDriver::DriverConfig_<ContainerAllocator> & v) 
  {
    s << indent << "drives[]" << std::endl;
    for (size_t i = 0; i < v.drives.size(); ++i)
    {
      s << indent << "  drives[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::re2robotDriver::DriveConfig_<ContainerAllocator> >::stream(s, indent + "    ", v.drives[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RE2ROBOTDRIVER_MESSAGE_DRIVERCONFIG_H

