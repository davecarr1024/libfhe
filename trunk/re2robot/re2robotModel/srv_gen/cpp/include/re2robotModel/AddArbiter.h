/* Auto-generated by genmsg_cpp for file /home/dave/ros/re2robot/re2robotModel/srv/AddArbiter.srv */
#ifndef RE2ROBOTMODEL_SERVICE_ADDARBITER_H
#define RE2ROBOTMODEL_SERVICE_ADDARBITER_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"

#include "re2robotModel/ArbiterConfig.h"



namespace re2robotModel
{
template <class ContainerAllocator>
struct AddArbiterRequest_ : public ros::Message
{
  typedef AddArbiterRequest_<ContainerAllocator> Type;

  AddArbiterRequest_()
  : config()
  {
  }

  AddArbiterRequest_(const ContainerAllocator& _alloc)
  : config(_alloc)
  {
  }

  typedef  ::re2robotModel::ArbiterConfig_<ContainerAllocator>  _config_type;
   ::re2robotModel::ArbiterConfig_<ContainerAllocator>  config;


private:
  static const char* __s_getDataType_() { return "re2robotModel/AddArbiterRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "331a0d4a9f1058e003eef57ded6e4ccc"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "0ed5e0636f291e4517e8f4f37018f3dc"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "ArbiterConfig config\n\
\n\
================================================================================\n\
MSG: re2robotModel/ArbiterConfig\n\
#common\n\
string type\n\
float32 updateIntervalS\n\
\n\
#control arbiter\n\
string initialController\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, config);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, config);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(config);
    return size;
  }

  typedef boost::shared_ptr< ::re2robotModel::AddArbiterRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re2robotModel::AddArbiterRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct AddArbiterRequest
typedef  ::re2robotModel::AddArbiterRequest_<std::allocator<void> > AddArbiterRequest;

typedef boost::shared_ptr< ::re2robotModel::AddArbiterRequest> AddArbiterRequestPtr;
typedef boost::shared_ptr< ::re2robotModel::AddArbiterRequest const> AddArbiterRequestConstPtr;


template <class ContainerAllocator>
struct AddArbiterResponse_ : public ros::Message
{
  typedef AddArbiterResponse_<ContainerAllocator> Type;

  AddArbiterResponse_()
  : success(false)
  {
  }

  AddArbiterResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


private:
  static const char* __s_getDataType_() { return "re2robotModel/AddArbiterResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "358e233cde0c8a8bcfea4ce193f8fc15"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "0ed5e0636f291e4517e8f4f37018f3dc"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool success\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::re2robotModel::AddArbiterResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re2robotModel::AddArbiterResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct AddArbiterResponse
typedef  ::re2robotModel::AddArbiterResponse_<std::allocator<void> > AddArbiterResponse;

typedef boost::shared_ptr< ::re2robotModel::AddArbiterResponse> AddArbiterResponsePtr;
typedef boost::shared_ptr< ::re2robotModel::AddArbiterResponse const> AddArbiterResponseConstPtr;

struct AddArbiter
{

typedef AddArbiterRequest Request;
typedef AddArbiterResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AddArbiter
} // namespace re2robotModel

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::re2robotModel::AddArbiterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "331a0d4a9f1058e003eef57ded6e4ccc";
  }

  static const char* value(const  ::re2robotModel::AddArbiterRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x331a0d4a9f1058e0ULL;
  static const uint64_t static_value2 = 0x03eef57ded6e4cccULL;
};

template<class ContainerAllocator>
struct DataType< ::re2robotModel::AddArbiterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotModel/AddArbiterRequest";
  }

  static const char* value(const  ::re2robotModel::AddArbiterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re2robotModel::AddArbiterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ArbiterConfig config\n\
\n\
================================================================================\n\
MSG: re2robotModel/ArbiterConfig\n\
#common\n\
string type\n\
float32 updateIntervalS\n\
\n\
#control arbiter\n\
string initialController\n\
";
  }

  static const char* value(const  ::re2robotModel::AddArbiterRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::re2robotModel::AddArbiterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::re2robotModel::AddArbiterResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::re2robotModel::AddArbiterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotModel/AddArbiterResponse";
  }

  static const char* value(const  ::re2robotModel::AddArbiterResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re2robotModel::AddArbiterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
";
  }

  static const char* value(const  ::re2robotModel::AddArbiterResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::re2robotModel::AddArbiterResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re2robotModel::AddArbiterRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.config);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddArbiterRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re2robotModel::AddArbiterResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddArbiterResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<re2robotModel::AddArbiter> {
  static const char* value() 
  {
    return "0ed5e0636f291e4517e8f4f37018f3dc";
  }

  static const char* value(const re2robotModel::AddArbiter&) { return value(); } 
};

template<>
struct DataType<re2robotModel::AddArbiter> {
  static const char* value() 
  {
    return "re2robotModel/AddArbiter";
  }

  static const char* value(const re2robotModel::AddArbiter&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re2robotModel::AddArbiterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0ed5e0636f291e4517e8f4f37018f3dc";
  }

  static const char* value(const re2robotModel::AddArbiterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re2robotModel::AddArbiterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotModel/AddArbiter";
  }

  static const char* value(const re2robotModel::AddArbiterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<re2robotModel::AddArbiterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0ed5e0636f291e4517e8f4f37018f3dc";
  }

  static const char* value(const re2robotModel::AddArbiterResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<re2robotModel::AddArbiterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotModel/AddArbiter";
  }

  static const char* value(const re2robotModel::AddArbiterResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RE2ROBOTMODEL_SERVICE_ADDARBITER_H

