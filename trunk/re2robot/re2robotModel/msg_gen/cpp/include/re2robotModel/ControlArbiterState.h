/* Auto-generated by genmsg_cpp for file /home/dave/ros/re2robot/re2robotModel/msg/ControlArbiterState.msg */
#ifndef RE2ROBOTMODEL_MESSAGE_CONTROLARBITERSTATE_H
#define RE2ROBOTMODEL_MESSAGE_CONTROLARBITERSTATE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace re2robotModel
{
template <class ContainerAllocator>
struct ControlArbiterState_ : public ros::Message
{
  typedef ControlArbiterState_<ContainerAllocator> Type;

  ControlArbiterState_()
  : activeController()
  , controllers()
  {
  }

  ControlArbiterState_(const ContainerAllocator& _alloc)
  : activeController(_alloc)
  , controllers(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _activeController_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  activeController;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _controllers_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  controllers;


  ROS_DEPRECATED uint32_t get_controllers_size() const { return (uint32_t)controllers.size(); }
  ROS_DEPRECATED void set_controllers_size(uint32_t size) { controllers.resize((size_t)size); }
  ROS_DEPRECATED void get_controllers_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->controllers; }
  ROS_DEPRECATED void set_controllers_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->controllers = vec; }
private:
  static const char* __s_getDataType_() { return "re2robotModel/ControlArbiterState"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c5ef3b0c73d38edb82013574bb8e3755"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string activeController\n\
string[] controllers\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, activeController);
    ros::serialization::serialize(stream, controllers);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, activeController);
    ros::serialization::deserialize(stream, controllers);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(activeController);
    size += ros::serialization::serializationLength(controllers);
    return size;
  }

  typedef boost::shared_ptr< ::re2robotModel::ControlArbiterState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::re2robotModel::ControlArbiterState_<ContainerAllocator>  const> ConstPtr;
}; // struct ControlArbiterState
typedef  ::re2robotModel::ControlArbiterState_<std::allocator<void> > ControlArbiterState;

typedef boost::shared_ptr< ::re2robotModel::ControlArbiterState> ControlArbiterStatePtr;
typedef boost::shared_ptr< ::re2robotModel::ControlArbiterState const> ControlArbiterStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::re2robotModel::ControlArbiterState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::re2robotModel::ControlArbiterState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace re2robotModel

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::re2robotModel::ControlArbiterState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c5ef3b0c73d38edb82013574bb8e3755";
  }

  static const char* value(const  ::re2robotModel::ControlArbiterState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc5ef3b0c73d38edbULL;
  static const uint64_t static_value2 = 0x82013574bb8e3755ULL;
};

template<class ContainerAllocator>
struct DataType< ::re2robotModel::ControlArbiterState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "re2robotModel/ControlArbiterState";
  }

  static const char* value(const  ::re2robotModel::ControlArbiterState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::re2robotModel::ControlArbiterState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string activeController\n\
string[] controllers\n\
";
  }

  static const char* value(const  ::re2robotModel::ControlArbiterState_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::re2robotModel::ControlArbiterState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.activeController);
    stream.next(m.controllers);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlArbiterState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::re2robotModel::ControlArbiterState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::re2robotModel::ControlArbiterState_<ContainerAllocator> & v) 
  {
    s << indent << "activeController: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.activeController);
    s << indent << "controllers[]" << std::endl;
    for (size_t i = 0; i < v.controllers.size(); ++i)
    {
      s << indent << "  controllers[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.controllers[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RE2ROBOTMODEL_MESSAGE_CONTROLARBITERSTATE_H

