"""autogenerated by genmsg_py from AddDriveRequest.msg. Do not edit."""
import roslib.message
import struct

import re2robotDriver.msg

class AddDriveRequest(roslib.message.Message):
  _md5sum = "261d54567be7e7d9c2c8b1a6996d205c"
  _type = "re2robotDriver/AddDriveRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """DriveConfig config

================================================================================
MSG: re2robotDriver/DriveConfig
#Drive
string name
string type
float32 updateIntervalS
float32 cmdTimeoutS
float32 maxVelocity
float32 minPosition
float32 maxPosition

#SimDrive
float32 initialPosition
float32 positionPGain
float32 positionDGain
float32 velocityTimeToTargetS
"""
  __slots__ = ['config']
  _slot_types = ['re2robotDriver/DriveConfig']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       config
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(AddDriveRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.config is None:
        self.config = re2robotDriver.msg.DriveConfig()
    else:
      self.config = re2robotDriver.msg.DriveConfig()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.config.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.config.type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9f.pack(_x.config.updateIntervalS, _x.config.cmdTimeoutS, _x.config.maxVelocity, _x.config.minPosition, _x.config.maxPosition, _x.config.initialPosition, _x.config.positionPGain, _x.config.positionDGain, _x.config.velocityTimeToTargetS))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.config is None:
        self.config = re2robotDriver.msg.DriveConfig()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.config.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.config.type = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.config.updateIntervalS, _x.config.cmdTimeoutS, _x.config.maxVelocity, _x.config.minPosition, _x.config.maxPosition, _x.config.initialPosition, _x.config.positionPGain, _x.config.positionDGain, _x.config.velocityTimeToTargetS,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.config.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.config.type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9f.pack(_x.config.updateIntervalS, _x.config.cmdTimeoutS, _x.config.maxVelocity, _x.config.minPosition, _x.config.maxPosition, _x.config.initialPosition, _x.config.positionPGain, _x.config.positionDGain, _x.config.velocityTimeToTargetS))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.config is None:
        self.config = re2robotDriver.msg.DriveConfig()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.config.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.config.type = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.config.updateIntervalS, _x.config.cmdTimeoutS, _x.config.maxVelocity, _x.config.minPosition, _x.config.maxPosition, _x.config.initialPosition, _x.config.positionPGain, _x.config.positionDGain, _x.config.velocityTimeToTargetS,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_9f = struct.Struct("<9f")
"""autogenerated by genmsg_py from AddDriveResponse.msg. Do not edit."""
import roslib.message
import struct


class AddDriveResponse(roslib.message.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "re2robotDriver/AddDriveResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       success
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(AddDriveResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
class AddDrive(roslib.message.ServiceDefinition):
  _type          = 're2robotDriver/AddDrive'
  _md5sum = '70c564ffc604af2a9251b0bf0a28375f'
  _request_class  = AddDriveRequest
  _response_class = AddDriveResponse
