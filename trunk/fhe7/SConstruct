import os
import subprocess
import sys

env = Environment()

py_ver = sys.version[:3]

libs = [ 'boost_filesystem', 'python%s' % py_ver, 'boost_python', 'ncurses', 'yaml-cpp', 'Box2D', 'BulletCollision', 'BulletDynamics', 'LinearMath' ]

env.Append( CPPFLAGS = [ '-g', '-Wall', '-Werror' ] )
env.Append( CPPPATH = [ '#', '/usr/include/python%s' % py_ver, 'ext/yaml-cpp/include', 'ext/box2d/include', 'ext/bullet/include/bullet', 'ext/tinyxml' ] )
env.Append( LIBPATH = [ 'ext/yaml-cpp/lib', 'ext/box2d/lib', 'ext/bullet/lib' ] )
env.Append( LIBS = libs )
pwd = env.Dir( '#' ).abspath
env.Append( RPATH = [ pwd, pwd + '/ext/yaml-cpp/lib', pwd + '/ext/bullet/lib' ] )

if not env.GetOption( 'clean' ):
    shs = map( subprocess.Popen, map( str, env.Glob( 'ext/*.sh' ) ) )
    assert all( [ not sh.wait() for sh in shs ] )
    
    conf = Configure( env )
    for lib in libs:
        assert conf.CheckLib( lib ), "failed to find lib %s" % lib
    env = conf.Finish()

tinyxml = env.SharedLibrary( 'ext/tinyxml/tinyxml', env.Glob( 'ext/tinyxml/tiny*.cpp' ) )

env = env.Clone()
#env.Append( LIBS = [ tinyxml ] )

mod_libs = []
for mod in filter( os.path.isdir, map( str, env.Glob( 'fhe/*' ) ) ):
    mod_srcs = env.Glob( '%s/*.cpp' % mod )
    mod_libs.append( env.SharedLibrary( mod, mod_srcs ) )
    
env = env.Clone()
env.Append( LIBS = [ mod_libs ] )

env.SharedLibrary( 'fhe', [], SHLIBPREFIX = '' )

app_srcs = env.Glob( 'apps/*.cpp' )
for app_src in app_srcs:
    app = env.Program( app_src )

env = env.Clone()
env.Append( LIBS = [ 'gtest' ] )

test_srcs = env.Glob( 'tests/*.cpp' )
for test_src in test_srcs:
    test = env.Program( test_src )
    test_name = str( test[0] )
    env.Command( test_name + '.out', test, test_name )
